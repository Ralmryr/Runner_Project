Index: src/Hero.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Hero.java b/src/Hero.java
--- a/src/Hero.java	
+++ b/src/Hero.java	(date 1636126867680)
@@ -6,7 +6,7 @@
 
     public Hero(double x, double y){
         super("heros.png",
-                0.016,
+                0.05,
                 6,
                 100,
                 80,
@@ -20,7 +20,7 @@
         this.gravity = 3000;
     }
 
-    public void update(){
+    public void update(long time){
         double accelX = prevState[4];
         double accelY = prevState[5];
         double velocX = prevState[1]+super.getDurationBetweenFrames()*accelX;
@@ -39,9 +39,9 @@
         prevState[5] = this.gravity;
         super.setPosX(posX);
         super.setPosY(posY);
-        if(velocY==0 && posY==250) super.update(); // Sprite du joueur qui court
-        else if(velocY>0) super.setViewport(calcViewPort(1, 1)); // Sprite du joueur qui descend
-        else super.setViewport(calcViewPort(0, 1)); // Sprite du joueur qui saute
+        if(velocY==0 && posY==250) super.update(time); // Sprite du joueur qui court
+        else if(velocY>0) super.getSprite().setViewport(chooseSprite(1, 1)); // Sprite du joueur qui descend
+        else super.getSprite().setViewport(chooseSprite(0, 1)); // Sprite du joueur qui saute
     }
 
     public void jump(){
Index: src/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Main.java b/src/Main.java
new file mode 100644
--- /dev/null	(date 1636123048184)
+++ b/src/Main.java	(date 1636123048184)
@@ -0,0 +1,28 @@
+import javafx.application.Application;
+import javafx.scene.Group;
+import javafx.stage.Stage;
+
+public class Main extends Application{
+
+    public void start(Stage primaryStage){
+        primaryStage.setTitle("Runner");
+        Group root = new Group();
+        GameScene scene = new GameScene(root, 800, 300);
+
+        root.getChildren().add(scene.getBgLeft());
+        root.getChildren().add(scene.getBgRight());
+        root.getChildren().add(scene.getHero());
+        scene.getListOfFoes().forEach(foe -> root.getChildren().add(foe.getSprite()));
+
+        scene.startTimer();
+        primaryStage.setScene(scene);
+        primaryStage.show();
+    }
+    public static void main(String[] args) {
+        launch(args);
+        // write your code here
+    }
+}
+
+
+// bgleft.setViewPort(camera.getX()%spriteBg.getWidth));
\ No newline at end of file
Index: src/Camera.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Camera.java b/src/Camera.java
--- a/src/Camera.java	
+++ b/src/Camera.java	(date 1636123961127)
@@ -5,14 +5,13 @@
     private double m;
     private double f;
     private double[] prevState = {0, 0, 0, 0};
-    private Hero hero;
     private double timeBetweenUpdates;
 
-    public Camera(int x, int y, Hero hero){
+    public Camera(int x, int y){
         this.x = x;
         this.y = y;
+
         prevState[0] = x;
-        this.hero = hero;
         this.f = 20;
         this.m = 1;
         this.k = (f*f)/4; // Pour atteindre le régime critique du ressort
@@ -24,7 +23,7 @@
         return(this.x+","+this.y);
     }
 
-    public void update(){
+    public void update(Hero hero){
         double accelX = (k/m)*(hero.getPosX()-100-prevState[0])-(f/m)*prevState[1];
         double accelY = (k/m)*(hero.getPosY()-150-prevState[2])-(f/m)*prevState[3];
         double velocX = prevState[1] + accelX*timeBetweenUpdates;
Index: src/GameScene.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/GameScene.java b/src/GameScene.java
--- a/src/GameScene.java	
+++ b/src/GameScene.java	(date 1636126724188)
@@ -1,6 +1,10 @@
+import javafx.animation.Animation;
+import javafx.animation.AnimationTimer;
 import javafx.geometry.Rectangle2D;
 import javafx.scene.Parent;
 import javafx.scene.Scene;
+import javafx.scene.image.ImageView;
+
 import java.util.Random;
 
 import java.util.ArrayList;
@@ -11,57 +15,76 @@
     private StaticThing bgLeft, bgRight;
     private Hero hero;
     private ArrayList<Foe> listOfFoes;
-    private Rectangle2D rect;
+    private AnimationTimer timer;
+    private long timeBetweenUpdatesNs = (long) 1e9/100;
+    private long timeBetweenRenderNs = (long) 1e9/60;
 
     public GameScene(Parent root, double windowWidth, double windowHeight) {
         super(root, windowWidth, windowHeight);
-        String src = "C:\\Users\\Clément\\IdeaProjects\\RunnerProject\\img\\";
-        this.bgLeft = new StaticThing("desert.png");
-        this.bgRight = new StaticThing("desert.png");
+        this.bgLeft = new StaticThing("desert.png", 0, 0);
+        this.bgRight = new StaticThing("desert.png", 800, 0);
         this.hero = new Hero(300, 250);
-        this.camera = new Camera(0, 100, this.hero);
+        this.camera = new Camera(0, 100);
+
         this.listOfFoes = new ArrayList<>();
         Random rand = new Random();
-        for(int i=2;i<500;i++) this.listOfFoes.add(new Foe(1500*i-rand.nextInt(500)-300, 280));
-    }
+        for(int i=2;i<500;i++) this.listOfFoes.add(new Foe(1500*i-rand.nextInt(500)-300, 300));
 
-    public void update(){
-        double camX = this.camera.getX();
-        double camY = this.camera.getY();
-        double bgWidth = this.bgLeft.getImageWidth();
-        double bgHeight = this.bgLeft.getImageHeight();
-        this.rect = new Rectangle2D(camX % bgWidth, camY, bgWidth-camX % bgWidth, bgHeight-camY);
+        root.setOnMouseClicked((mouseEvent -> hero.jump()));
 
-//        this.bgLeft.setViewport(rect);
-//        this.bgRight.setViewport(new Rectangle2D(0, camY,camX % bgWidth, bgHeight-camY));
-//        this.bgRight.setX(bgWidth-camX % bgWidth);
+        this.timer = new AnimationTimer()
+        {
+            private long prevTimeRender = 0;
+            private long prevTimeUpdate = 0;
 
-//        // Mise à jour de l'affichage du héros
-//        this.hero.setX(this.hero.getPosX()-this.camera.getX());
-//        this.hero.setY(this.hero.getPosY()-this.camera.getY());
-//
-//        // Mise à jour de l'affichage des ennemis
-//        for (Foe foe : this.listOfFoes) {
-//            foe.setX(foe.getPosX()-this.camera.getX());
-//            foe.setY(foe.getPosY()-this.camera.getY());
-//        }
+            public void handle(long time){
+                if(time-prevTimeUpdate>timeBetweenUpdatesNs){
+                    hero.update(time);
+                    camera.update(hero);
+                    for (Foe foe : listOfFoes) {
+                        foe.update(time);
+                        if(hero.isInvincible()) hero.subInvincibility(time-prevTimeUpdate);
+                        else if (hero.getHitBox().intersects(foe.getHitBox())){
+                            System.out.println("Collision !");
+                            hero.setInvincibility(5E8);
+                            break;
+                        }
+                    }
+                    prevTimeUpdate = time;
+                }
+                if (time - prevTimeRender > timeBetweenRenderNs) {
+                    printScene();
+                    prevTimeRender = time;
+                }
+            }
+        };
+    }
+
+    public void printScene(){
+        bgLeft.print(camera);
+        bgRight.print(camera);
+        hero.print(camera);
+        listOfFoes.forEach(foe -> foe.print(camera));
     }
 
+    public void startTimer(){
+        this.timer.start();
+    }
 
-    public StaticThing getBgLeft() {
-        return bgLeft;
+    public void stopTimer(){
+        this.timer.stop();
     }
 
-    public StaticThing getBgRight() {
-        return bgRight;
+    public ImageView getBgLeft() {
+        return bgLeft.getImage();
     }
 
-    public Hero getHero() {
-        return hero;
+    public ImageView getBgRight() {
+        return bgRight.getImage();
     }
 
-    public Camera getCustomCamera(){
-        return this.camera;
+    public ImageView getHero() {
+        return hero.getSprite();
     }
 
     public ArrayList<Foe> getListOfFoes() {
Index: src/StaticThing.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/StaticThing.java b/src/StaticThing.java
--- a/src/StaticThing.java	
+++ b/src/StaticThing.java	(date 1636123961140)
@@ -1,23 +1,33 @@
 import javafx.geometry.Rectangle2D;
 import javafx.scene.image.ImageView;
 
-public class StaticThing extends ImageView {
+public class StaticThing {
 
     double x, y;
+    ImageView image;
 
-    public StaticThing(String filePath){
-        super(filePath);
-        this.x = 0;
-        this.y = 0;
-        this.setX(this.x);
-        this.setY(this.y);
+    public StaticThing(String filePath, double x, double y) {
+        image = new ImageView(filePath);
+        this.x = x;
+        this.y = y;
     }
 
-    public double getImageHeight(){
-        return this.getImage().getHeight();
+    public void print(Camera camera) {
+        double imageHeight = image.getImage().getHeight();
+        double imageWidth = image.getImage().getWidth();
+        double camX = camera.getX();
+        double camY = camera.getY();
+
+        image.setViewport(new Rectangle2D(
+                Math.max(0, camX%800 - x),
+                camY,
+                imageWidth + x - camX%imageWidth,
+                imageHeight-camY));
+
+        image.setX(Math.max(0, x - camX % imageWidth));
     }
 
-    public double getImageWidth(){
-        return this.getImage().getWidth();
+    public ImageView getImage() {
+        return image;
     }
 }
Index: src/AnimatedThing.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/AnimatedThing.java b/src/AnimatedThing.java
--- a/src/AnimatedThing.java	
+++ b/src/AnimatedThing.java	(date 1636127151983)
@@ -1,20 +1,20 @@
 import javafx.geometry.Rectangle2D;
 import javafx.scene.image.ImageView;
 
-public abstract class AnimatedThing extends ImageView {
+public abstract class AnimatedThing{
     private double posX;
     private double posY;
     private int attitude;
     private double durationBetweenFrames;
-    private long animationIndex;
     private int animationMaxIndex;
     private int spriteWidth;
     private int spriteHeight;
     private int offsetBetweenFramesX;
     private int offsetBetweenFramesY;
+    private ImageView sprite;
 
     public AnimatedThing(String filePath, double durationBetweenFrames, int animationMaxIndex, int spriteHeight, int spriteWidth, int offsetBetweenFramesX, int offsetBetweenFramesY, double x, double y){
-        super(filePath);
+        sprite = new ImageView(filePath);
         this.posX = x;
         this.posY = y;
         this.durationBetweenFrames = durationBetweenFrames;
@@ -23,24 +23,26 @@
         this.spriteWidth = spriteWidth;
         this.offsetBetweenFramesX = offsetBetweenFramesX;
         this.offsetBetweenFramesY = offsetBetweenFramesY;
-        this.animationIndex = 0;
         this.attitude = 0;
-        setViewport(calcViewPort());
+    }
+
+    public void update(long time){
+        sprite.setViewport(chooseSprite(time));
     }
 
-    public void update(){
-        this.animationIndex++;
-        setViewport(calcViewPort());
+    public void print(Camera camera){
+        sprite.setX(getPosX()-camera.getX());
+        sprite.setY(getPosY()-camera.getY());
     }
 
-    public Rectangle2D calcViewPort(){
-        // the animation index increases 60 times/sec, but we want the character to change its sprite less often hence the /5
-        long minX = (animationIndex/5)*(spriteWidth + offsetBetweenFramesX) % ((long) animationMaxIndex*(spriteWidth + offsetBetweenFramesX));
-        long minY = (long) attitude*(spriteHeight+offsetBetweenFramesY);
+    private Rectangle2D chooseSprite(long time){
+        int index = (int) (time*1e-9%(animationMaxIndex*durationBetweenFrames)/durationBetweenFrames);
+        int minX = (index % animationMaxIndex) * (spriteWidth + offsetBetweenFramesX);
+        int minY = attitude*(spriteHeight+offsetBetweenFramesY);
         return new Rectangle2D(minX, minY, spriteWidth, spriteHeight);
     }
 
-    public Rectangle2D calcViewPort(int indexX, int indexY){
+    public Rectangle2D chooseSprite(int indexX, int indexY){
         long minX = (long) (indexX)*(spriteWidth + offsetBetweenFramesX);
         long minY = (long) (indexY)*(spriteHeight + offsetBetweenFramesY);
         return new Rectangle2D(minX, minY, spriteWidth, spriteHeight);
@@ -62,6 +64,10 @@
         return posY;
     }
 
+    public ImageView getSprite() {
+        return sprite;
+    }
+
     public void setPosX(double posX){
         this.posX = posX;
     }
Index: src/HelloWorld.java
===================================================================
diff --git a/src/HelloWorld.java b/src/HelloWorld.java
deleted file mode 100644
--- a/src/HelloWorld.java	
+++ /dev/null	
@@ -1,63 +0,0 @@
-import javafx.animation.AnimationTimer;
-import javafx.application.Application;
-import javafx.scene.Group;
-import javafx.scene.text.Text;
-import javafx.stage.Stage;
-
-public class HelloWorld extends Application{
-
-    public void start(Stage primaryStage){
-        primaryStage.setTitle("Runner");
-        Group root = new Group();
-        GameScene scene = new GameScene(root, 800, 300);
-
-        Text fpsText = new Text();
-        fpsText.setX(20);
-        fpsText.setY(20);
-
-        root.getChildren().add(scene.getBgLeft());
-        root.getChildren().add(scene.getBgRight());
-        root.getChildren().add(fpsText);
-        root.getChildren().add(scene.getHero());
-        scene.getListOfFoes().forEach(root.getChildren()::add);
-
-        root.setOnMouseClicked((mouseEvent -> scene.getHero().jump()));
-
-        AnimationTimer timer = new AnimationTimer()
-            {
-                private long prevTimeHero = 0;
-                private long prevTimeCamera = 0;
-                public void handle(long time){
-                    if(time-prevTimeHero>scene.getHero().getDurationBetweenFrames()*1_000_000_000){
-                        scene.getHero().update();
-                        fpsText.setText("FPS : " + 1e9/(time - prevTimeHero));
-                            for (Foe foe : scene.getListOfFoes()) {
-                                foe.update();
-                                if(scene.getHero().isInvincible()) scene.getHero().subInvincibility(time-prevTimeHero);
-                                else if (scene.getHero().getHitBox().intersects(foe.getHitBox())){
-                                    System.out.println("Collision !");
-                                    scene.getHero().setInvincibility(5E8);
-                                    break;
-                                }
-                            }
-                        prevTimeHero = time;
-                    }
-                    if(time-prevTimeCamera>scene.getCustomCamera().getTimeBetweenUpdates()*1_000_000_000){
-                        scene.getCustomCamera().update();
-                        prevTimeCamera = time;
-                    }
-                    scene.update();
-                }
-            };
-        timer.start();
-        primaryStage.setScene(scene);
-        primaryStage.show();
-    }
-    public static void main(String[] args) {
-        launch(args);
-        // write your code here
-    }
-}
-
-
-// bgleft.setViewPort(camera.getX()%spriteBg.getWidth));
\ No newline at end of file
